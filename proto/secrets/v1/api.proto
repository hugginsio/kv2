syntax = "proto3";

package secrets.v1;

// Secret represents a single secret version.
message Secret {
  string key = 1; // The plain text key of the secret.
  bytes value = 2; // The encrypted value of the secret.
  uint32 version = 3; // The version of the represented secret.
}

// SecretMetadata represents a secret and all its versions.
message SecretMetadata {
  string key = 1; // The plain text key of the secret.
  repeated uint32 versions = 2; // All versions of the secret.
}

// Request message for `secrets.v1.Kv2Service/CreateSecret`.
message CreateSecretRequest {
  string key = 1; // The plain text key of the secret.
  bytes value = 2; // The encoded value of the secret.
}

// Response message for `secrets.v1.Kv2Service/CreateSecret`.
message CreateSecretResponse {
  SecretMetadata secret = 1; // The metadata of the created secret.
}

// Request message for `secrets.v1.Kv2Service/GetSecret`.
message GetSecretRequest {
  string key = 1; // The plain text key of the secret.
}

// Response message for `secrets.v1.Kv2Service/GetSecret`.
message GetSecretResponse {
  Secret secret = 1; // The requested secret.
}

// Request message for `secrets.v1.Kv2Service/UpdateSecret`.
message UpdateSecretRequest {
  string key = 1; // The plain text key of the secret.
  bytes value = 2; // The encoded value of the secret.
}

// Response message for `secrets.v1.Kv2Service/UpdateSecret`.
message UpdateSecretResponse {
  uint32 version = 1; // The version of the updated secret.
}

// Request message for `secrets.v1.Kv2Service/DeleteSecret`.
message DeleteSecretRequest {
  string key = 1; // The plain text key of the secret.
}

// Empty message. Check for an error code to determine success.
message DeleteSecretResponse {}

// Request message for `secrets.v1.Kv2Service/RevertSecret`.
message RevertSecretRequest {
  string key = 1; // The plain text key of the secret.
}

// Request message for `secrets.v1.Kv2Service/RevertSecret`.
message RevertSecretResponse {
  uint32 version = 1; // The current version of the reverted secret.
}

// Empty message. No request message needed to list secrets.
message ListSecretsRequest {}

// Response message for `secrets.v1.Kv2Service/ListSecrets`.
message ListSecretsResponse {
  repeated SecretMetadata secrets = 1; // The secret metadata for all available secrets.
}

// Request message for `secrets.v1.Kv2Service/Backup`.
message BackupRequest {
  optional string name = 1; // The name of the backup. Defaults to `kv2.db`.
}

// Empty message. Check for an error code to determine success.
message BackupResponse {}

/**
 * The Kv2 service provides an encrypted key-value store with versioning and backup capabilities.
 */
service Kv2Service {
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse); // Create a new secret.
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse); // Retrieve a secret.
  rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse); // Update an existing secret.
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse); // Delete a secret.
  rpc RevertSecret(RevertSecretRequest) returns (RevertSecretResponse); // Revert a secret to a previous version.
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse); // List all available secrets.
  rpc Backup(BackupRequest) returns (BackupResponse); // Backup the secrets database.
}
