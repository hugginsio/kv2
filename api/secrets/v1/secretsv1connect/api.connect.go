// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: secrets/v1/api.proto

package secretsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.huggins.io/kv2/api/secrets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// Kv2ServiceName is the fully-qualified name of the Kv2Service service.
	Kv2ServiceName = "secrets.v1.Kv2Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// Kv2ServiceCreateSecretProcedure is the fully-qualified name of the Kv2Service's CreateSecret RPC.
	Kv2ServiceCreateSecretProcedure = "/secrets.v1.Kv2Service/CreateSecret"
	// Kv2ServiceGetSecretProcedure is the fully-qualified name of the Kv2Service's GetSecret RPC.
	Kv2ServiceGetSecretProcedure = "/secrets.v1.Kv2Service/GetSecret"
	// Kv2ServiceUpdateSecretProcedure is the fully-qualified name of the Kv2Service's UpdateSecret RPC.
	Kv2ServiceUpdateSecretProcedure = "/secrets.v1.Kv2Service/UpdateSecret"
	// Kv2ServiceDeleteSecretProcedure is the fully-qualified name of the Kv2Service's DeleteSecret RPC.
	Kv2ServiceDeleteSecretProcedure = "/secrets.v1.Kv2Service/DeleteSecret"
	// Kv2ServiceRevertSecretProcedure is the fully-qualified name of the Kv2Service's RevertSecret RPC.
	Kv2ServiceRevertSecretProcedure = "/secrets.v1.Kv2Service/RevertSecret"
	// Kv2ServiceListSecretsProcedure is the fully-qualified name of the Kv2Service's ListSecrets RPC.
	Kv2ServiceListSecretsProcedure = "/secrets.v1.Kv2Service/ListSecrets"
	// Kv2ServiceBackupProcedure is the fully-qualified name of the Kv2Service's Backup RPC.
	Kv2ServiceBackupProcedure = "/secrets.v1.Kv2Service/Backup"
	// Kv2ServiceApplicationVersionInfoProcedure is the fully-qualified name of the Kv2Service's
	// ApplicationVersionInfo RPC.
	Kv2ServiceApplicationVersionInfoProcedure = "/secrets.v1.Kv2Service/ApplicationVersionInfo"
)

// Kv2ServiceClient is a client for the secrets.v1.Kv2Service service.
type Kv2ServiceClient interface {
	CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error)
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	UpdateSecret(context.Context, *connect.Request[v1.UpdateSecretRequest]) (*connect.Response[v1.UpdateSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
	RevertSecret(context.Context, *connect.Request[v1.RevertSecretRequest]) (*connect.Response[v1.RevertSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error)
	ApplicationVersionInfo(context.Context, *connect.Request[v1.ApplicationVersionInfoRequest]) (*connect.Response[v1.ApplicationVersionInfoResponse], error)
}

// NewKv2ServiceClient constructs a client for the secrets.v1.Kv2Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKv2ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) Kv2ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kv2ServiceMethods := v1.File_secrets_v1_api_proto.Services().ByName("Kv2Service").Methods()
	return &kv2ServiceClient{
		createSecret: connect.NewClient[v1.CreateSecretRequest, v1.CreateSecretResponse](
			httpClient,
			baseURL+Kv2ServiceCreateSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("CreateSecret")),
			connect.WithClientOptions(opts...),
		),
		getSecret: connect.NewClient[v1.GetSecretRequest, v1.GetSecretResponse](
			httpClient,
			baseURL+Kv2ServiceGetSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("GetSecret")),
			connect.WithClientOptions(opts...),
		),
		updateSecret: connect.NewClient[v1.UpdateSecretRequest, v1.UpdateSecretResponse](
			httpClient,
			baseURL+Kv2ServiceUpdateSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("UpdateSecret")),
			connect.WithClientOptions(opts...),
		),
		deleteSecret: connect.NewClient[v1.DeleteSecretRequest, v1.DeleteSecretResponse](
			httpClient,
			baseURL+Kv2ServiceDeleteSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("DeleteSecret")),
			connect.WithClientOptions(opts...),
		),
		revertSecret: connect.NewClient[v1.RevertSecretRequest, v1.RevertSecretResponse](
			httpClient,
			baseURL+Kv2ServiceRevertSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("RevertSecret")),
			connect.WithClientOptions(opts...),
		),
		listSecrets: connect.NewClient[v1.ListSecretsRequest, v1.ListSecretsResponse](
			httpClient,
			baseURL+Kv2ServiceListSecretsProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("ListSecrets")),
			connect.WithClientOptions(opts...),
		),
		backup: connect.NewClient[v1.BackupRequest, v1.BackupResponse](
			httpClient,
			baseURL+Kv2ServiceBackupProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("Backup")),
			connect.WithClientOptions(opts...),
		),
		applicationVersionInfo: connect.NewClient[v1.ApplicationVersionInfoRequest, v1.ApplicationVersionInfoResponse](
			httpClient,
			baseURL+Kv2ServiceApplicationVersionInfoProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("ApplicationVersionInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kv2ServiceClient implements Kv2ServiceClient.
type kv2ServiceClient struct {
	createSecret           *connect.Client[v1.CreateSecretRequest, v1.CreateSecretResponse]
	getSecret              *connect.Client[v1.GetSecretRequest, v1.GetSecretResponse]
	updateSecret           *connect.Client[v1.UpdateSecretRequest, v1.UpdateSecretResponse]
	deleteSecret           *connect.Client[v1.DeleteSecretRequest, v1.DeleteSecretResponse]
	revertSecret           *connect.Client[v1.RevertSecretRequest, v1.RevertSecretResponse]
	listSecrets            *connect.Client[v1.ListSecretsRequest, v1.ListSecretsResponse]
	backup                 *connect.Client[v1.BackupRequest, v1.BackupResponse]
	applicationVersionInfo *connect.Client[v1.ApplicationVersionInfoRequest, v1.ApplicationVersionInfoResponse]
}

// CreateSecret calls secrets.v1.Kv2Service.CreateSecret.
func (c *kv2ServiceClient) CreateSecret(ctx context.Context, req *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	return c.createSecret.CallUnary(ctx, req)
}

// GetSecret calls secrets.v1.Kv2Service.GetSecret.
func (c *kv2ServiceClient) GetSecret(ctx context.Context, req *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return c.getSecret.CallUnary(ctx, req)
}

// UpdateSecret calls secrets.v1.Kv2Service.UpdateSecret.
func (c *kv2ServiceClient) UpdateSecret(ctx context.Context, req *connect.Request[v1.UpdateSecretRequest]) (*connect.Response[v1.UpdateSecretResponse], error) {
	return c.updateSecret.CallUnary(ctx, req)
}

// DeleteSecret calls secrets.v1.Kv2Service.DeleteSecret.
func (c *kv2ServiceClient) DeleteSecret(ctx context.Context, req *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// RevertSecret calls secrets.v1.Kv2Service.RevertSecret.
func (c *kv2ServiceClient) RevertSecret(ctx context.Context, req *connect.Request[v1.RevertSecretRequest]) (*connect.Response[v1.RevertSecretResponse], error) {
	return c.revertSecret.CallUnary(ctx, req)
}

// ListSecrets calls secrets.v1.Kv2Service.ListSecrets.
func (c *kv2ServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// Backup calls secrets.v1.Kv2Service.Backup.
func (c *kv2ServiceClient) Backup(ctx context.Context, req *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error) {
	return c.backup.CallUnary(ctx, req)
}

// ApplicationVersionInfo calls secrets.v1.Kv2Service.ApplicationVersionInfo.
func (c *kv2ServiceClient) ApplicationVersionInfo(ctx context.Context, req *connect.Request[v1.ApplicationVersionInfoRequest]) (*connect.Response[v1.ApplicationVersionInfoResponse], error) {
	return c.applicationVersionInfo.CallUnary(ctx, req)
}

// Kv2ServiceHandler is an implementation of the secrets.v1.Kv2Service service.
type Kv2ServiceHandler interface {
	CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error)
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	UpdateSecret(context.Context, *connect.Request[v1.UpdateSecretRequest]) (*connect.Response[v1.UpdateSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
	RevertSecret(context.Context, *connect.Request[v1.RevertSecretRequest]) (*connect.Response[v1.RevertSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error)
	ApplicationVersionInfo(context.Context, *connect.Request[v1.ApplicationVersionInfoRequest]) (*connect.Response[v1.ApplicationVersionInfoResponse], error)
}

// NewKv2ServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKv2ServiceHandler(svc Kv2ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kv2ServiceMethods := v1.File_secrets_v1_api_proto.Services().ByName("Kv2Service").Methods()
	kv2ServiceCreateSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceCreateSecretProcedure,
		svc.CreateSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("CreateSecret")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceGetSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceGetSecretProcedure,
		svc.GetSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("GetSecret")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceUpdateSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceUpdateSecretProcedure,
		svc.UpdateSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("UpdateSecret")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceDeleteSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("DeleteSecret")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceRevertSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceRevertSecretProcedure,
		svc.RevertSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("RevertSecret")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceListSecretsHandler := connect.NewUnaryHandler(
		Kv2ServiceListSecretsProcedure,
		svc.ListSecrets,
		connect.WithSchema(kv2ServiceMethods.ByName("ListSecrets")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceBackupHandler := connect.NewUnaryHandler(
		Kv2ServiceBackupProcedure,
		svc.Backup,
		connect.WithSchema(kv2ServiceMethods.ByName("Backup")),
		connect.WithHandlerOptions(opts...),
	)
	kv2ServiceApplicationVersionInfoHandler := connect.NewUnaryHandler(
		Kv2ServiceApplicationVersionInfoProcedure,
		svc.ApplicationVersionInfo,
		connect.WithSchema(kv2ServiceMethods.ByName("ApplicationVersionInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/secrets.v1.Kv2Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case Kv2ServiceCreateSecretProcedure:
			kv2ServiceCreateSecretHandler.ServeHTTP(w, r)
		case Kv2ServiceGetSecretProcedure:
			kv2ServiceGetSecretHandler.ServeHTTP(w, r)
		case Kv2ServiceUpdateSecretProcedure:
			kv2ServiceUpdateSecretHandler.ServeHTTP(w, r)
		case Kv2ServiceDeleteSecretProcedure:
			kv2ServiceDeleteSecretHandler.ServeHTTP(w, r)
		case Kv2ServiceRevertSecretProcedure:
			kv2ServiceRevertSecretHandler.ServeHTTP(w, r)
		case Kv2ServiceListSecretsProcedure:
			kv2ServiceListSecretsHandler.ServeHTTP(w, r)
		case Kv2ServiceBackupProcedure:
			kv2ServiceBackupHandler.ServeHTTP(w, r)
		case Kv2ServiceApplicationVersionInfoProcedure:
			kv2ServiceApplicationVersionInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKv2ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKv2ServiceHandler struct{}

func (UnimplementedKv2ServiceHandler) CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.CreateSecret is not implemented"))
}

func (UnimplementedKv2ServiceHandler) GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.GetSecret is not implemented"))
}

func (UnimplementedKv2ServiceHandler) UpdateSecret(context.Context, *connect.Request[v1.UpdateSecretRequest]) (*connect.Response[v1.UpdateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.UpdateSecret is not implemented"))
}

func (UnimplementedKv2ServiceHandler) DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.DeleteSecret is not implemented"))
}

func (UnimplementedKv2ServiceHandler) RevertSecret(context.Context, *connect.Request[v1.RevertSecretRequest]) (*connect.Response[v1.RevertSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.RevertSecret is not implemented"))
}

func (UnimplementedKv2ServiceHandler) ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.ListSecrets is not implemented"))
}

func (UnimplementedKv2ServiceHandler) Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.Backup is not implemented"))
}

func (UnimplementedKv2ServiceHandler) ApplicationVersionInfo(context.Context, *connect.Request[v1.ApplicationVersionInfoRequest]) (*connect.Response[v1.ApplicationVersionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secrets.v1.Kv2Service.ApplicationVersionInfo is not implemented"))
}
