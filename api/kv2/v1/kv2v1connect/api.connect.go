// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kv2/v1/api.proto

package kv2v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.huggins.io/kv2/api/kv2/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// Kv2ServiceName is the fully-qualified name of the Kv2Service service.
	Kv2ServiceName = "kv2.v1.Kv2Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// Kv2ServiceGetSecretProcedure is the fully-qualified name of the Kv2Service's GetSecret RPC.
	Kv2ServiceGetSecretProcedure = "/kv2.v1.Kv2Service/GetSecret"
)

// Kv2ServiceClient is a client for the kv2.v1.Kv2Service service.
type Kv2ServiceClient interface {
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
}

// NewKv2ServiceClient constructs a client for the kv2.v1.Kv2Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKv2ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) Kv2ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kv2ServiceMethods := v1.File_kv2_v1_api_proto.Services().ByName("Kv2Service").Methods()
	return &kv2ServiceClient{
		getSecret: connect.NewClient[v1.GetSecretRequest, v1.GetSecretResponse](
			httpClient,
			baseURL+Kv2ServiceGetSecretProcedure,
			connect.WithSchema(kv2ServiceMethods.ByName("GetSecret")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kv2ServiceClient implements Kv2ServiceClient.
type kv2ServiceClient struct {
	getSecret *connect.Client[v1.GetSecretRequest, v1.GetSecretResponse]
}

// GetSecret calls kv2.v1.Kv2Service.GetSecret.
func (c *kv2ServiceClient) GetSecret(ctx context.Context, req *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return c.getSecret.CallUnary(ctx, req)
}

// Kv2ServiceHandler is an implementation of the kv2.v1.Kv2Service service.
type Kv2ServiceHandler interface {
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
}

// NewKv2ServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKv2ServiceHandler(svc Kv2ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kv2ServiceMethods := v1.File_kv2_v1_api_proto.Services().ByName("Kv2Service").Methods()
	kv2ServiceGetSecretHandler := connect.NewUnaryHandler(
		Kv2ServiceGetSecretProcedure,
		svc.GetSecret,
		connect.WithSchema(kv2ServiceMethods.ByName("GetSecret")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kv2.v1.Kv2Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case Kv2ServiceGetSecretProcedure:
			kv2ServiceGetSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKv2ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKv2ServiceHandler struct{}

func (UnimplementedKv2ServiceHandler) GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kv2.v1.Kv2Service.GetSecret is not implemented"))
}
